<?php
namespace frontend\controllers;

use app\models\ArticleCategory;
use backend\models\Article;
use backend\models\ArticleDetail;
use backend\models\Goods;
use backend\models\GoodsCategory;
use frontend\models\Address;
use frontend\models\Cart;
use frontend\models\Member;
use frontend\models\MemberForm;
use frontend\models\Order;
use frontend\models\OrderGoods;
use Symfony\Component\Yaml\Yaml;
use yii\base\Model;
use yii\db\Exception;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\web\Cookie;
use yii\web\Response;

class ApiController extends Controller{

    public $enableCsrfValidation = false;

    public function init()
    {
        \Yii::$app->response->format = Response::FORMAT_JSON;
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function actionReguester(){
        $resquest = \Yii::$app->request;
        if($resquest->isPost){
            $member = new Member();
//            $member->scenarios = 'reguester';
            $member->username = $resquest->post('username');
            $member->password = $resquest->post('password');
            $member->repassword = $resquest->post('repassword');
            $member->email = $resquest->post('email');
            $member->tel = $resquest->post('tel');
//            $member->code = $resquest->post('code');
            if($member->validate()){
                $member->save();
                return ['status'=>'1','msg'=>'','data'=>$member->toArray()];
            }
            return ['status'=>'1','msg'=>$member->getErrors()];

        }
        return ['status'=>'请使用post'];
    }

    //用户登录
    public function actionUserLogin(){
       $resquert = \Yii::$app->request;
       if($resquert->isPost){
           $user = Member::findOne(['username'=>$resquert->post('username')]);
           if($user && \Yii::$app->security->validatePassword($resquert->post('password'),$user->password_hash)){
                \Yii::$app->user->login($user);
               return ['status'=>1,'error'=>''];
           }
           return ['status'=>0,'error'=>'账号或密码错误'];
       }
        return ['status'=>-1,'error'=>'请用post提交'];
    }

    public function actionGetInfo(){

    }

    //用户修改密码
    public function actionEditPassword(){
//        $request = \Yii::$app->request;
//        if($request->isPost){
//            $user = Member::findOne(['username'=>$request->post('username')]);
//            if($user){
//                if(\Yii::$app->security->validatePassword($request->post('oldpassword'),$user->password_hash)){
//                    $model = new Member();
//                    $model->scenario = 'edit';
//
//                        $model->password = \Yii::$app->security->generatePasswordHash($request->post('password'));
//                        if($model->save()){
//                            return ['status'=>1,'error'=>''];
//                        }
//
//                        return ['status'=>-1,'error'=>$model->getErrors()];
//                }
//                return ['status'=>-1,'error'=>'账号密码错误'];
//            }
//            return ['status'=>-1,'error'=>'账号密码'];
//        }
//        return ['status'=>-1,'error'=>'请用post提交'];
        $request = \Yii::$app->request;
        if($request->isPost){
            $id = \Yii::$app->user->id;
            if(!$id){
                return ['status'=>-1,'error'=>'请登录'];
            }
            $user =Member::findOne(['id'=>$id]);
            $user->scenario='edit';
            if($user){

                    $user->password_hash = \Yii::$app->security->generatePasswordHash($request->post('password'));
                  if($user->save()){
                      return ['status'=>1,'error'=>''];
                  }

                return ['status'=>-1,'error'=>$user->getErrors()];
            }
            return ['status'=>-1,'error'=>'用户名密码不正确'];
        }
        return ['status'=>-1,'error'=>'请用post提交'];


    }
    //获得用户信息
    public function actionGetUserInfo(){
        if(\Yii::$app->request->isPost){
           if(\Yii::$app->user->isGuest){
               return ['status'=>-1,'error'=>'请先登录'];
           }
            return ['status'=>1,'error'=>'','data'=>\Yii::$app->user->identity->toArray()];
        }
        return ['status'=>-1,'error'=>'请用post提交'];
    }

    //地址功能API
    //添加地址
    public function actionAddressAdd(){
        $request = \Yii::$app->request;
        if($request->isPost){
            if(!\Yii::$app->user->isGuest){
                $member_id = \Yii::$app->user->id;
                $model = new Address();
                $model->name = $request->post('name');
                $model->provence = $request->post('provence');
                $model->city = $request->post('city');
                $model->area = $request->post('area');
                $model->detail = $request->post('detail');
                $model->phone = $request->post('phone');
                $model->default = $request->post('default');
                $model->member_id = $member_id;
                if($model->validate()){
                    if($model->member_id){
                        foreach (Address::find()->where(['member_id'=>$model->member_id])->all() as $add){
                            $add->default = 0;
                            $add->save(false);
                        }
                    }
                    $model->save();
                    return ['status'=>1];
                }
                return ['status'=>1,'error'=>$model->getErrors()];
            }
            return ['status'=>0,'error'=>'请您先登录'];
        }
        return ['status'=>0,'error'=>'请用post提交'];
    }

    //修改地址

    public function actionAddressEdit(){

        $request = \Yii::$app->request;
        if($request->isPost){
            if(!\Yii::$app->user->isGuest){
                $member_id = \Yii::$app->user->id;
                $address = Address::find()->where(['member_id'=>$member_id])->asArray()->all();
                return ['status'=>0,'data'=>$address];
            }
            return ['status'=>0,'error'=>'请您先登录'];
        }
        return ['status'=>0,'error'=>'请用post提交'];
    }

    //删除地址
    public function actionAddressDel(){
       $request = \Yii::$app->request;
       if($request->isGet){
           if(!\Yii::$app->user->isGuest){
               $member_id = \Yii::$app->user->id;
               Address::deleteAll(['id'=>$request->get('id'),'member_id'=>$member_id]);
               return ['status'=>1];
           }
           return ['status'=>0,'error'=>'请您先登录'];
       }
        return ['status'=>0,'error'=>'请用post提交'];
    }

    //地址列表
    public function actionAddressIndex(){
        if(\Yii::$app->request->isPost){
            if(!\Yii::$app->user->isGuest){
                $member_id = \Yii::$app->user->id;
                $address = Address::find()->where(['member_id'=>$member_id])->asArray()->all();
                return ['status'=>0,'data'=>$address];
            }
            return ['status'=>0,'error'=>'请您先登录'];
        }
        return ['status'=>0,'error'=>'请用post提交'];
    }

    public function actionLoginout(){
        $member = \Yii::$app->user->id;
        $user = Member::findOne(['id'=>$member]);
        if($user){
            \Yii::$app->user->logout($user);
            return ['status'=>1];
        }
        return ['status'=>0];
    }

    // 分类API
    //查找所有分类
    public function actionGetAllGoodscategorys(){
        if(\Yii::$app->request->isGet){
                $goodsCategorys = GoodsCategory::find()->asArray()->all();
                return ['status'=>0,'data'=>$goodsCategorys];
            }
        return ['status'=>0,'error'=>'请用get提交'];
    }

    //获取某分类的所有子分类
    public function actionGetAllChildren(){

        if($request = \Yii::$app->request){
            $id = $request->get('id');
            $category = GoodsCategory::findOne(['id'=>$id]);

            $cages =GoodsCategory::find()->where([
                'AND',
                ['>','lft',$category->lft],
                ['<','rgt',$category->rgt],
                ['tree'=>$category->tree]
            ])->asArray()->all();
            return ['status'=>0,'data'=>$cages];
        }
        return ['status'=>0,'error'=>'请用get提交'];
    }

    //获取某分类的父分类
    //需要完善判断,id不存在的情况要排除
    public function actionGetParentGoodscategory(){
        $request = \Yii::$app->request;
        if($request->isGet){
            $id = $request->get('id');
            $category = GoodsCategory::findOne(['id'=>$id]);
            if($category->parent_id){
                if( $cages = GoodsCategory::findOne(['id'=>$category->parent_id])){
                    return ['status'=>0,'data'=>$cages];
                }
            }
        }
        return ['status'=>0,'error'=>'请用get提交'];

    }

    //获取商品的API接口
    //获取某商品分类下面的所有商品
    public function actionGetGoodsByCategory(){
        $request = \Yii::$app->request;
        if($request->isGet){
            $id = \Yii::$app->request->get('id');
            $category = GoodsCategory::findOne(['id'=>$id]);
            $categorys = GoodsCategory::find()->where(['AND',['>','lft',$category->lft],['<','rgt',$category->rgt],
                ['tree'=>$category->tree]])->andWhere(['depth'=>2])->asArray()->all();
            $ids = ArrayHelper::getColumn($categorys,'id');
            $goods = [];
            foreach ($ids as $id){
                $good = Goods::findAll(['goods_category_id'=>$id]);
                if($good){
                    $goods[] = $good;
                }
            }
            return ['status'=>1,'data'=>$goods];
        }
        return ['status'=>0,'error'=>'请用get提交'];
    }

    //获取某品牌下面的所有商品
    public function actionGetGoodsByBrand(){
        $request = \Yii::$app->request;
        if($request->isGet){
            $id = \Yii::$app->request->get('id');
            $goods = Goods::findAll(['brand_id'=>$id]);

            return ['status'=>1,'data'=>$goods];
        }
        return ['status'=>0,'error'=>'请用get提交'];
    }
//获取文章分类API接口
    public function actionGetArticleCategory(){

               $articleCategory = \frontend\models\ArticleCategory::find()->all();

            return ['status'=>1,'data'=>$articleCategory];
    }

    public function actionWeather()
    {
        $data = [];
        $wea = simplexml_load_file('http://flash.weather.com.cn/wmaps/xml/sichuan.xml');
        $kk = ['张三'=>28,'李四'=>22];
        var_dump($kk);
//        foreach ($wea as $item){
//            $tq=[];
//            foreach ($item as $key=>$value){1
//                $tq[$key] = (string)$value;
//            }
//            $data[] = $tq;
//        }
//        var_dump($data);
    }
    //获取某分类下的所有文章
    public function actionGetArticleByCategory()
    {
        $request = \Yii::$app->request;
        if($request->isGet){
             $article_category_id = $request->get('id');
            $articles = Article::find()->where(['article_category_id'=>$article_category_id])->asArray()->all();
            foreach ($articles as &$ar){
                $ar['detail'] = ArticleDetail::findOne(['article_id'=>$ar['id']]);
            }
            return ['status'=>1,'error'=>$articles];
        }
        return ['status'=>0,'error'=>'请用get提交'];
    }

    //-获取某文章所属分类
    public function actionGetArticleCategoryByArticle()
    {
        $request = \Yii::$app->request;
        if($request->isGet){
            $article_id = $request->get('id');
            $article = Article::findOne(['id'=>$article_id]);
            $articleCategory_name = $article->articleCategory->name;
            return ['status'=>1];
        }
        return ['status'=>0,'error'=>'请用get提交'];
    }

    //购物车 API
    //添加购物车
    /**
     * @return array
     */
    public function actionCartAdd(){
        //如果用户没有登录 ,保存在cookie
        $request = \Yii::$app->request;
        $amount = $request->get('amount');
        $goods_id = $request->get('id');
       $goods = Goods::findOne(['id'=>$goods_id,'is_on_sale'=>1]);

        if($request->isGet&&$goods!=null){
            if(\Yii::$app->user->isGuest) {

                $cookies = \Yii::$app->request->cookies;
                $cookie = $cookies->get('cart');
                if(!$cookie){
                    $cart = [];
                }else{
                    //cookie中有数据,只用更新amount
                    $cart = unserialize($cookie->value);
                }
                $cookies = \Yii::$app->response->cookies;
                if(key_exists($goods_id,$cart)){
                    $cart[$goods_id] +=$amount;
                }else{
                    $cart[$goods_id] = $amount;
                }
                $cookie = new Cookie([
                    'name'=>'cart',
                    'value'=>serialize($cart)
                ]);
                $cookies->add($cookie);
                return ['status'=>1,];
//                $cookies = \Yii::$app->request->cookies;
//                $cookie = $cookies->get('cart');
//                $cart = unserialize($cookie->value);
//                return ['status'=>1,$cart];


            }else{
                //登录用户操作,保存在数据表
                $member_id  = \Yii::$app->user->id;
                $model = new Cart();
                $cart = Cart::findOne(['goods_id'=>$goods_id,'member_id'=>$member_id]);
                if($cart ){
                    $cart->amount += $amount;
                    $cart->save();
                }else{
                    $model->amount = $amount;
                    $model->goods_id = $goods_id;
                    $model->member_id = $member_id;
                    $model->save();
                }

                return ['satus'=>1,'mess'=>'数据保存成功'];
            }
        }
        return ['status'=>0,'error'=>'商品不存在'];

    }

    //-修改购物车某商品数量

    public function actionCartEdit(){
        //如果用户没有登录 ,保存在cookie
        $request = \Yii::$app->request;
        $amount = $request->get('amount');
        $goods_id = $request->get('id');
        $goods = Goods::findOne(['id'=>$goods_id,'is_on_sale'=>1]);

        if($request->isGet&&$goods!=null){
            if(\Yii::$app->user->isGuest) {

                $cookies = \Yii::$app->request->cookies;
                $cookie = $cookies->get('cart');
                if(!$cookie){
                    $cart = [];
                }else{
                    //cookie中有数据,只用更新amount
                    $cart = unserialize($cookie->value);
                }
                $cookies = \Yii::$app->response->cookies;
                if(key_exists($goods_id,$cart)){
                    $cart[$goods_id] = $amount;
                }
                $cookie = new Cookie([
                    'name'=>'cart',
                    'value'=>serialize($cart)
                ]);
                $cookies->add($cookie);
//                return ['status'=>0,'error'=>'ok'];
            }else{
                //登录用户操作,保存在数据表
                $member_id  = \Yii::$app->user->id;
                $model = new Cart();
                $cart = Cart::findOne(['goods_id'=>$goods_id,'member_id'=>$member_id]);
                if($cart ){
                    $cart->amount = $amount;
                    $cart->save();
                }
                return ['satus'=>1,'mess'=>'修改成功'];
            }
        }
        return ['status'=>0,'error'=>'商品不存在'];
    }

    //-删除购物车某商品

    public function actionCartDelOne(){
        //如果用户没有登录 ,保存在cookie
        $request = \Yii::$app->request;

        $goods_id = $request->get('id');
        $goods = Goods::findOne(['id'=>$goods_id,'is_on_sale'=>1]);

        if($request->isGet&&$goods!=null){
            if(\Yii::$app->user->isGuest) {

                $cookies = \Yii::$app->request->cookies;
                $cookie = $cookies->get('cart');
                if(!$cookie){
                    $cart = [];
                }else{
                    //cookie中有数据,只用更新amount
                    $cart = unserialize($cookie->value);
                    $cookies = \Yii::$app->response->cookies;
                    if(key_exists($goods_id,$cart)){
                        unset($cart[$goods_id]);
                    }
                    $cookie = new Cookie([
                        'name'=>'cart',
                        'value'=>serialize($cart)
                    ]);
                    $cookies->add($cookie);
                }

//                return ['status'=>0,'error'=>'ok'];
            }else{
                //登录用户操作,保存在数据表
                $member_id  = \Yii::$app->user->id;
                $model = new Cart();
                $cart = Cart::deleteAll(['goods_id'=>$goods_id,'member_id'=>$member_id]);
                if($cart ){
                    return ['satus'=>1,'mess'=>'删除该商品成功'];
                }else{
                    return ['satus'=>0,'mess'=>'删除该商品失败'];
                }
            }
        }
        return ['status'=>0,'error'=>'商品不存在'];
    }

    //-清空购物车
    public function actionCartDel(){
        if(!\Yii::$app->user->isGuest){
            $member_id = \Yii::$app->user->id;
           if( Cart::deleteAll(['member_id'=>$member_id])){
               return ['status'=>1];
           }
            return ['status'=>0,'error'=>'删除失败'];
        }
        return ['status'=>0,'error'=>'请登录'];
    }

    //-获取购物车所有商品

    public function actionGoods(){

        //没有登录从cookie中取
        if(\Yii::$app->user->isGuest){
            $cookies = \Yii::$app->request->cookies;
            $cookie = $cookies->get('cart');

            if($cookie!=null){
                $cart = unserialize($cookie->value);

                return ['status'=>1,'data'=>$cart];
            }
        }else{
            $member_id = \Yii::$app->user->id;
            $carts = Cart::find()->where(['member_id'=>$member_id])->all();

            $pro = [];
            foreach ($carts as $cart){
                $pro[$cart->goods_id] = $cart->amount;
            }
            return ['status'=>1,'data'=>$pro];
        }
    }

    //-获取支付方式
    public function actionPayment(){
        $request = \Yii::$app->request;

        if($request->isGet && !\Yii::$app->user->isGuest){
            $member_id = \Yii::$app->user->id;
            $payments = Order::payment();

            return ['status'=>1,'data'=>$payments];
        }else{
            return ['status'=>1,'error'=>'请您先登录'];
        }
    }

    //-获取送货方式

    public function actionDelivery(){
        $request = \Yii::$app->request;

        if($request->isGet && !\Yii::$app->user->isGuest){
            $member_id = \Yii::$app->user->id;
            $deliverys = Order::delivery();


            return ['status'=>1,'data'=>$deliverys];
        }else{
            return ['status'=>1,'error'=>'请您先登录'];
        }
    }

    //-提交订单
    public function actionOrder(){

        $request = \Yii::$app->request;
        if($request->isPost){
            if(!\Yii::$app->user->isGuest){
                $member_id = \Yii::$app->user->id;
                $model = new Order();
                $model->member_id = $member_id;
                $model->name = $request->post('name');
                $model->province = $request->post('province');
                $model->city = $request->post('city');
                $model->area = $request->post('area');
                $model->address = $request->post('address');
                $model->tel = $request->post('tel');
                $model->delivery_id = $request->post('divery_id');
                $model->delivery_name = $request->post('divery_name');
                $model->delivery_price = $request->post('divery_price');
                $model->payment_id = $request->post('payment_id');
                $model->payment_name = $request->post('payment_name');
                $model->total = $request->post('total');
//                $model->save();
                $tr = \Yii::$app->db->beginTransaction();
                try{
                        $model->save();
                        $order_id = \Yii::$app->db->getLastInsertID();
                        //购物车数据放入order_goods表,并且删除当前登录用户的购物车数据
                        $carts = Cart::find()->where(['member_id' =>$member_id])->asArray()->all();
                        $goods_ids = ArrayHelper::map($carts,'goods_id','amount');
                        $goods = Goods::find()->where(['in','id',array_keys($goods_ids)])->all();
                        foreach ($goods as $good){
                            $order_goods = new OrderGoods();
                            $order_goods->order_id = $order_id;
                            $order_goods->goods_id = $good->id;
                            $order_goods->goods_name = $good->name;
                            $order_goods->goods_logo = $good->logo;
                            if(array_key_exists($good->id,$goods_ids)){
                                $order_goods->amount = $goods_ids[$good->id];
                            }
                            $order_goods->price = $good->shop_price;
                            $order_goods->total =  $request->post('total');
                            $order_goods->save();
                            $stock = Goods::findOne(['id'=>$good->id])->stock;
                            if($stock<$order_goods->amount){
                                throw new Exception('库存不足');
                            }
                            $gs =Goods::findOne(['id'=>$good->id]);
                            $gs->stock -=$order_goods->amount;
                            $gs->save();
                            Cart::deleteAll(['goods_id'=>$good->id,'member_id'=>$member_id]);
                        }
                        $tr->commit();
                    return ['status'=>1,'订单提交成功'];
                }catch (Exception $e) {
                      $tr->rollBack();
                      return ['status'=>0,'error'=>$e->getMessage()];
                     }
            }
            return ['status'=>1,'error'=>'请登录'];

        }else{
            return ['status'=>1,'error'=>'请用post提交'];
        }
    }

    //-获取当前用户订单列表
    public function actionOrderList(){
        if(!\Yii::$app->user->isGuest){
            $member_id = \Yii::$app->user->id;
            //获得订单列表
            $orders = Order::find()->where(['member_id'=>$member_id])->asArray()->all();
            return ['status'=>1,'data'=>$orders];
        }
        return ['status'=>1,'error'=>'请登录'];
    }













}